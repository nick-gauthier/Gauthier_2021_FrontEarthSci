geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd') +
scale_edge_alpha()+
coord_fixed()+
theme_void()
library(ggraph)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd') +
scale_edge_alpha()+
coord_fixed()+
theme_void()
net.in <- read.csv("Data/AD1200sim.csv", row.names = 1, check.names = F)
net.in[net.in < .9] <- 0
net.in <- net.in %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F)
V(net.in)$deg <- degree(net.in)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd') +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
V(net.in)$deg <-igraph::degree(net.in)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
logit<-function(x) log(x/(1-x))
E(net.in)$weight.l <- logit(E(net.in)$weight)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight.l, alpha = weight.l)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
weight.l
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight.l, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = log(weight), alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_viridis(guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
knitr::opts_chunk$set(echo = TRUE)
library(remote)
install.packages("remote")
knitr::opts_chunk$set(echo = TRUE)
install_github('marchtaylor/sinkr')
library(devtools)
library(sinkr)
library(devtools)
install_github('marchtaylor/sinkr')
library(sinkr)
rm(e1)
rm(eof1200)
rm(elev)
rm(c(b,b3))
rm(b,b3)
rm(ad21200.t)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(raster)
library(gdistance)
library(rasterVis)
library(tidyverse)
library(rgdal)
swsn.attr <- read_csv('Data/attributes_orig.csv')
library(tidyverse)
library(rgdal)
swsn.attr <- read_csv('Data/attributes_orig.csv')
swsn.attr
swsn.attr %>%
select(EASTING, NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame
library(igraph)
swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cvind(swsn.attr, .)
swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
swsn <%>%
swsn.attr <- read_csv('Data/attributes_orig.csv')
swsn.attr <-  swsn.attr
swsn.attr <-  swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
swsn.attr
glimpse(swsn.attr)
ad1200 <- read_csv('Data/AD1200sim.csv')
ad1200
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
V(ad1200)
vertex_attr <- swsn.attr
vertex_attr
rm(vertex.attr)
rm(vertex_attr)
vertex_attr(ad1200) <- swsn.attr
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_edgelist
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_edgelist
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
readSWSN <- function(net){
# we use a hack here to set the vertex attributes. need to find if there's another way to easily add a whole dataframe of vertex attributes using something other than graph_from_data_frame's vertices arguement
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame# %>%
#graph_from
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
swsn.attr <- read_csv('Data/attributes_orig.csv') %>%
select(-1) # drop ID column
swsn.attr
swsn.attr <-  swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
glimpse(swsn.attr)
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
readSWSN2 <- function(net){
net.in <- read.csv(net, row.names = 1, check.names = F) %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F)
ord <- match(V(net.in)$name, swsn.attr$SWSN_Site)
V(net.in)$lon <- swsn.attr[ord, 6]
V(net.in)$lat <- swsn.attr[ord, 7]
return(net.in)
}
ad1200.2 <- readSWSN2('Data/AD1200sim.csv')
ad1200.2
ad1200
ad1200.2
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
ad1200.2
ad1200
ad1200 %>%
as_data_frame
ad1200.2
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1250 <- readSWSN('Data/AD1250sim.csv')
ad1300 <- readSWSN('Data/AD1300sim.csv')
ad1350 <- readSWSN('Data/AD1350sim.csv')
ad1400 <- readSWSN('Data/AD1400sim.csv')
install.packages("gdistance")
library(tidyverse)
library(tidyverse)
library(rgdal)
library(ggraph)
ad1200.layout <- create_layout(ad1200, 'manual', node.positions = swsn.attr)
swsn.attr <- read_csv('Data/attributes_orig.csv') %>%
select(-1) # drop ID column
swsn.attr <-  swsn.attr %>%
select(x = EASTING, y = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
library(igraph)
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200.layout <- create_layout(ad1200, 'manual', node.positions = swsn.attr)
ggraph(ad1200, ad1200.layout) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point() +
scale_edge_color_viridis() +
coord_fixed()+
theme_void()
ggraph(ad1200, ad1200.layout) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point() +
scale_edge_color_viridis() +
coord_fixed()+
theme_void()
ggraph(ad1200, 'manual', node.positions = swsn.attr) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point() +
scale_edge_color_viridis() +
coord_fixed()+
theme_void()
library(tidyverse)
library(tidyverse)
library(rgdal)
library(igraph)
library(ggraph)
swsn.attr <- read_csv('Data/attributes_orig.csv') %>%
select(-1) # drop ID column
glimpse(swsn.attr)
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200 %>% E
ad1200 %>% E[weight > .75]
E(ad1200)[E(ad1200)$weight > .75]
ad1200 %>% delete_edges(E(ad1200)[E(ad1200)$weight < .75])
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.attr) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point() +
scale_edge_color_viridis() +
coord_fixed()+
theme_void()
swsn.attr <- read_csv('Data/attributes_orig.csv') %>%
select(-1) # drop ID column
swsn.attr <-  swsn.attr %>%
select(x = EASTING, y = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
swsn.attr <- read_csv('Data/attributes_orig.csv') %>%
select(-1) # drop ID column
swsn.attr
swsn.pts <-  swsn.attr %>%
select(x = EASTING, y = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame
swsn.pts
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75])
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>% index
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>% indices
ad1200
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>% E
ad1200
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75])
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point() +
scale_edge_color_viridis() +
coord_fixed()+
theme_void()
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point() +
scale_edge_color_viridis() +
scale_edge_alpha() +
coord_fixed()+
theme_void()
ad1200
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
coord_fixed()+
theme_void()
test.plot <- ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
coord_fixed()+
theme_void()
states <- map('state', regions = c('arizona', 'new mexico'), fill = T, plot = F)
library(maps)
states <- map('state', regions = c('arizona', 'new mexico'), fill = T, plot = F)
IDs <- sapply(strsplit(states$names, ":"), function(x) x[1])
states.ply <- map2SpatialPolygons(states, IDs=IDs)
library(maptools)
states.ply <- map2SpatialPolygons(states, IDs=IDs)
test.plot <- ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
coord_quickmap()+
theme_void()
test.plot + geom_polygon(aes(x = long, y = lat, group = region), data = states, color = 'black', fill = 'white')
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_polygon(aes(x = long, y = lat, group = region), data = states, color = 'black', fill = 'white') +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
coord_quickmap()+
theme_void()
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_polygon(aes(x = long, y = lat, group = region), data = states, color = 'black', fill = 'white') +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
coord_quickmap()+
theme_minimal()
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_polygon(aes(x = long, y = lat, group = region), data = states, color = 'black', fill = 'white') +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
geom_label(x = -106, y = 35, label = 'AD 1200') +
coord_quickmap()
ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_polygon(aes(x = long, y = lat, group = region), data = states, color = 'black', fill = 'white') +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
geom_label(x = -106, y = 35, label = 'AD 1200') +
coord_quickmap() +
theme_void()
eof1200 <- brick('Data/eof1200.nc')[[3]]
library(raster)
eof1200 <- brick('Data/eof1200.nc')[[3]]
test.plot <- ad1200 %>%
delete_edges(E(ad1200)[E(ad1200)$weight < .75]) %>%
ggraph('manual', node.positions = swsn.pts) +
geom_polygon(aes(x = long, y = lat, group = region), data = states, color = 'black', fill = 'white') +
geom_edge_link(aes(alpha = weight, color = weight)) +
geom_node_point(aes(size = P1room)) +
scale_size_area() +
scale_edge_color_viridis() +
scale_edge_alpha() +
geom_label(x = -106, y = 35, label = 'AD 1200') +
coord_quickmap() +
theme_void()
test.plot
library(rasterVis)
plot(eof1200)
levelplot(eof1200)
levelplot(eof1200, margin = F, par.settings = RdBuTheme())
eof1200 <- brick('Data/eof1200.nc')[[3]] %>% mask(states.ply)
levelplot(eof1200, margin = F, par.settings = RdBuTheme())
gplot(ad1200)
gplot(eof1200)
eof1200
test.plot + geom_raster(aes(fill = value), data = eof1200, na.rm = T, show.legend = F) +
test.plot + geom_raster(aes(fill = value), data = eof1200, na.rm = T, show.legend = F)
test.plot + geom_raster(aes(fill = value), data = eof1200, na.rm = T, show.legend = F)
eof1200 %>% values
eof1200 %>% getValues
eof1200
eof.dat <- data_frame(x = init(eof1200, 'x') %>% getValues,
y = init(eof1200, 'y') %>% getValues,
z = getValues(eof1200))
test.plot + geom_raster(aes(fill = z), data = eof.dat, na.rm = T, show.legend = F)
ggplot()+
test.plot + geom_raster(aes(x = x, y = y, fill = z), data = eof.dat, na.rm = T, show.legend = F)
test.plot + geom_raster(aes(x = x, y = y, fill = z), data = eof.dat, na.rm = T, show.legend = F)
init(eof1200, 'x') %>% getValues
init(eof1200, 'x', na.rm = T)
init(eof1200, 'x', na.rm = T) %>% getValues
