sites <- read_csv('data/attributes_orig.csv') %>%
st_as_sf(coords = c('EASTING', 'NORTHING'), crs = crs_utm) %>%
st_transform('+proj=longlat +datum=WGS84')
knitr::kable(
sites[1:3,c(1:4,8:10)], caption = 'A subset of the node level data.'
)
read_swsn <- function(net, time){
read.csv(net, row.names = 1, check.names = FALSE) %>%
as.matrix %>% # convert to a matrix
replace(. == 0, 999) %>% # replace 0 values with 999 temporarily
as_tbl_graph(directed = TRUE) %E>% # convert to directed graph
mutate(weight = if_else(weight == 999, 0, weight)) %>% # convert 999 values back to 0
rename(similarity = weight) %>% # rename the edge weights
filter(!edge_is_loop()) %>% # remove self loops
mutate(time = 1150 + 50 * time) %>%  # set the time period
activate('nodes') # activate node data
}
swsn <- list.files('data/Sim', full.names = TRUE) %>%
imap(read_swsn) %>%
reduce(graph_join, by = 'name') %>%
left_join(sites, by = c('name' = 'SWSN_Site'))
sim_tmp <- read.csv('data/Sim/AD1200sim.csv', row.names = 1, check.names = FALSE) %>%
as.matrix %>%
.[1:3,1:3]
knitr::kable(sim_tmp, caption = 'Example similarity matrix')
states <- maps::map('state', regions = c('arizona', 'new mexico'),
fill = TRUE, plot = FALSE) %>%
st_as_sf
# igraph is very particular about how it wants the points for plotting,
# requires a data frame with x and y columns
pts <- swsn %N>% # use swsn instead of sites to get the order right
pull(geometry) %>%
st_coordinates %>%
as_tibble %>%
rename(x = X, y = Y)
reof_raster <- brick('output/reofs.tif')  %>%
`names<-`(., paste0('reof', 1:nlayers(.)))
reof_dat <- reof_raster %>%
raster::extract(sites, df = TRUE) %>%
cbind(sites$SWSN_Site, .) %>%
select(-ID) %>%
rename(name = `sites$SWSN_Site`)
reof_raster %>%
crop(states) %>%
mask(states) %>%
as.data.frame(xy = TRUE, na.rm = TRUE, long = TRUE) %>%
ggplot() +
geom_raster(aes(x, y, fill = value)) +
scale_fill_distiller(palette = 'BrBG', limits = c(-1, 1)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_wrap(~layer) +
coord_sf(datum = NA) +
theme_void()
distances <- read_csv('output/distances.csv')
swsn_reof <- swsn %>%
swsn
swsn %E>%
filter(from < to) %>%
convert(to_undirected)
swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges')
swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity))
swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(n_theo = sqrt(.N()$degree[from] * .N()$degree[to]) %N>%
select(-degree) %>%
unmorph
unmorph %>%
swsn_reof <- swsn %E>%
swsn_reof <- swsn %>%
library(raster) # raster data manipulation
library(tidyverse) # data analysis and plotting
library(sf)
library(tidygraph) # network analysis
library(ggraph) # network plotting
library(ggridges)
library(mgcv) # GAM fitting
library(mgcViz) # GAM plotting
#devtools::install_github('nspope/corMLPE')
library(corMLPE)
library(furrr)
theme_set(theme_bw())
crs_utm <- '+proj=utm +zone=12 +datum=NAD27'
sites <- read_csv('data/attributes_orig.csv') %>%
st_as_sf(coords = c('EASTING', 'NORTHING'), crs = crs_utm) %>%
st_transform('+proj=longlat +datum=WGS84')
knitr::kable(
sites[1:3,c(1:4,8:10)], caption = 'A subset of the node level data.'
)
read_swsn <- function(net, time){
read.csv(net, row.names = 1, check.names = FALSE) %>%
as.matrix %>% # convert to a matrix
replace(. == 0, 999) %>% # replace 0 values with 999 temporarily
as_tbl_graph(directed = TRUE) %E>% # convert to directed graph
mutate(weight = if_else(weight == 999, 0, weight)) %>% # convert 999 values back to 0
rename(similarity = weight) %>% # rename the edge weights
filter(!edge_is_loop()) %>% # remove self loops
mutate(time = 1150 + 50 * time) %>%  # set the time period
activate('nodes') # activate node data
}
swsn <- list.files('data/Sim', full.names = TRUE) %>%
imap(read_swsn) %>%
reduce(graph_join, by = 'name') %>%
left_join(sites, by = c('name' = 'SWSN_Site'))
sim_tmp <- read.csv('data/Sim/AD1200sim.csv', row.names = 1, check.names = FALSE) %>%
as.matrix %>%
.[1:3,1:3]
knitr::kable(sim_tmp, caption = 'Example similarity matrix')
states <- maps::map('state', regions = c('arizona', 'new mexico'),
fill = TRUE, plot = FALSE) %>%
st_as_sf
# igraph is very particular about how it wants the points for plotting,
# requires a data frame with x and y columns
pts <- swsn %N>% # use swsn instead of sites to get the order right
pull(geometry) %>%
st_coordinates %>%
as_tibble %>%
rename(x = X, y = Y)
plot_swsn <- function(net, var = similarity, ncols = 3){
net %E>%
filter(similarity > 0,
from < 10) %>%
arrange(var) %>%
ggraph('manual', node.positions = pts) +
geom_edge_fan(aes(alpha = var, color = var)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_edges(~time, ncol = ncols) +
scale_edge_alpha(guide = 'none') +
scale_edge_color_distiller(palette = 'Spectral', guide = 'none') +
coord_sf(datum = NA) +
theme_void()
}
plot_swsn(swsn, ncols)
reof_raster <- brick('output/reofs.tif')  %>%
`names<-`(., paste0('reof', 1:nlayers(.)))
reof_dat <- reof_raster %>%
raster::extract(sites, df = TRUE) %>%
cbind(sites$SWSN_Site, .) %>%
select(-ID) %>%
rename(name = `sites$SWSN_Site`)
reof_raster %>%
crop(states) %>%
mask(states) %>%
as.data.frame(xy = TRUE, na.rm = TRUE, long = TRUE) %>%
ggplot() +
geom_raster(aes(x, y, fill = value)) +
scale_fill_distiller(palette = 'BrBG', limits = c(-1, 1)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_wrap(~layer) +
coord_sf(datum = NA) +
theme_void()
distances <- read_csv('output/distances.csv')
swsn_reof <- swsn %>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(n_theo = sqrt(.N()$degree[from] * .N()$degree[to])) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
swsn_reof <- swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(n_theo = sqrt(.N()$degree[from] * .N()$degree[to])) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
swsn_reof
swsn_reof <- swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)/sum(similarity)) %E>%
mutate(n_theo = sqrt(.N()$degree[from] * .N()$degree[to])) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
swsn_reof <- swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(n_theo = sqrt(.N()$degree[from] * .N()$degree[to]) / sum(similarity)) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
swsn
swsn_reof
swsn_reof <- swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(n_theo = sqrt(.N()$degree[from] * .N()$degree[to])) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
dat <- swsn_reof %E>%
as_tibble %>%
mutate(from = as.factor(from), to = as.factor(to), time = as.factor(time)) %>%
mutate(tie = similarity > 0) %>%
mutate(similarity = if_else(similarity > .999, .999, similarity))
dat <- swsn_reof %E>%
as_tibble %>%
mutate(from = as.factor(from), to = as.factor(to), time = as.factor(time)) %>%
mutate(tie = similarity > 0) %>%
mutate(similarity = if_else(similarity > .999, .999, similarity))
m1 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(degree))
m1 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(degree), data = .)
dat
swsn_reof <- swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(influence = sqrt(.N()$degree[from] * .N()$degree[to])) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
m1 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(influence), data = .)
swsn_reof <- swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(n_theo = sqrt(.N()$degree[from] * .N()$degree[to])) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
swsn_reof <- swsn %E>%
filter(from < to) %>%
convert(to_undirected) %>%
morph(to_split, time, split_by = 'edges') %N>% # split into subgraphs
mutate(degree = centrality_degree(weights = similarity)) %E>%
mutate(size = sqrt(.N()$degree[from] * .N()$degree[to])) %N>%
select(-degree) %>%
unmorph %>%
left_join(reof_dat) %E>%
mutate(from_site = .N()$name[from],
to_site = .N()$name[to]) %>%
left_join(distances) %>%
select(-c(from_site:to_site)) %>%
mutate(
rooms = case_when(
time == 1200 ~ sqrt(.N()$P1room[from] * .N()$P1room[to]),
time == 1250 ~ sqrt(.N()$P2room[from] * .N()$P2room[to]),
time == 1300 ~ sqrt(.N()$P3room[from] * .N()$P3room[to]),
time == 1350 ~ sqrt(.N()$P4room[from] * .N()$P4room[to]),
time == 1400 ~ sqrt(.N()$P5room[from] * .N()$P5room[to])),
reof1 = abs(.N()$reof1[from] - .N()$reof1[to]),
reof2 = abs(.N()$reof2[from] - .N()$reof2[to]),
reof3 = abs(.N()$reof3[from] - .N()$reof3[to]),
reof4 = abs(.N()$reof4[from] - .N()$reof4[to]),
reof5 = abs(.N()$reof5[from] - .N()$reof5[to]),
reof6 = abs(.N()$reof6[from] - .N()$reof6[to]),
macro_same = .N()$Macro[from] == .N()$Macro[to],
micro_same = .N()$Micro[from] == .N()$Micro[to])
m1 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(size), data = .)
dat <- swsn_reof %E>%
as_tibble %>%
mutate(from = as.factor(from), to = as.factor(to), time = as.factor(time)) %>%
mutate(tie = similarity > 0) %>%
mutate(similarity = if_else(similarity > .999, .999, similarity))
m1 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(size), data = .)
plot(m1)
m1 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(size) + s(rooms), data = ., select = TRUE)
plot(m1)
summary(m1)
gam.check(m1)
m1 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(size) + s(rooms), data = ., select = TRUE, family = betar)
plot(m1)
swsn_reof %E>%
mutate(pred = predict(m1, newdata = as_tibble(.), type = 'response')) %>%
arrange(pred) %>%
ggraph('manual', node.positions = pts) +
geom_edge_fan(aes(alpha = test, color = test)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_edges(~time) +
scale_edge_alpha(guide = 'none') +
scale_edge_color_distiller(palette = 'Spectral', guide = 'none') +
coord_sf(datum = NA) +
theme_void()
swsn_reof %E>%
mutate(pred = predict(m1, newdata = as_tibble(.), type = 'response')) %>%
arrange(pred) %>%
ggraph('manual', node.positions = pts) +
geom_edge_fan(aes(alpha = pred, color = pred)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_edges(~time) +
scale_edge_alpha(guide = 'none') +
scale_edge_color_distiller(palette = 'Spectral', guide = 'none') +
coord_sf(datum = NA) +
theme_void()
swsn_reof %E>%
mutate(pred = predict(m1, newdata = as_tibble(.), type = 'response')) %>%
arrange(pred) %>%
ggraph('manual', node.positions = pts) +
geom_edge_fan(aes(alpha = pred, color = pred)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_edges(~time) +
scale_edge_alpha(guide = 'none') +
scale_edge_color_distiller(palette = 'Spectral', guide = 'none') +
coord_sf(datum = NA) +
theme_void()
swsn_reof
swsn_reof %E>%
filter(similarity > 0) %>%
mutate(pred = predict(m1, newdata = as_tibble(.), type = 'response')) %>%
arrange(pred) %>%
filter(time ==1200) %>%
ggraph('manual', node.positions = pts) +
geom_edge_fan(aes(alpha = pred, color = pred)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_edges(~time) +
scale_edge_alpha(guide = 'none') +
scale_edge_color_distiller(palette = 'Spectral', guide = 'none') +
coord_sf(datum = NA) +
theme_void()
swsn_reof %E>%
filter(similarity > 0) %>%
mutate(pred = predict(m1, newdata = as_tibble(.), type = 'response')) %>%
arrange(pred) %>%
ggraph('manual', node.positions = pts) +
geom_edge_fan(aes(alpha = pred, color = pred)) +
geom_sf(data = states, fill = NA, color = 'black') +
facet_edges(~time) +
scale_edge_alpha(guide = 'none') +
scale_edge_color_distiller(palette = 'Spectral', guide = 'none') +
coord_sf(datum = NA) +
theme_void()
m2 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(size) + s(rooms) +
s(reof1) + s(reof2) + s(reof3) + s(reof4) +s(reof5) + s(reof6), data = ., select = TRUE, family = betar)
m2 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) + s(size) + s(rooms) +
s(reof1) + s(reof2) + s(reof3) + s(reof4) +s(reof5) + s(reof6),
data = ., select = TRUE, discrete = TRUE, nthreads = 2, family = betar)
plot(m2)
plot(m2, trans = plogis)
gam.check(m2)
m2 <- dat %>%
filter(tie == TRUE) %>%
bam(similarity ~ s(distance) +
s(size) + s(rooms) +
s(reof1, time, bs = 'fs') + s(reof2, time, bs = 'fs') +
s(reof3, time, bs = 'fs') + s(reof4, time, bs = 'fs') +
s(reof5, time, bs = 'fs') + s(reof6, time, bs = 'fs'),
data = ., select = TRUE, discrete = TRUE, nthreads = 2, family = betar)
plot(m2, trans = plogis)
summary(m2)
install.packages("furrr")
