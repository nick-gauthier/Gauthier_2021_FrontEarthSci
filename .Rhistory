mod5 <- gam(weight ~ eof3.b + eof5.b  +
s(lcp, bs = 'cr') +
s(water.stress, bs = 'cr') +
s(elev, bs = 'cr') +
s(eof3, by = eof3.b, bs = 'cr') +
s(eof4, by = eof4.b, bs = 'cr'),
family=betar(link="logit"),
method = 'REML', data = dat)
mod5 <- gam(weight ~ eof3.b + eof5.b  +
s(lcp, bs = 'cr') +
s(water.stress, bs = 'cr') +
s(elev, bs = 'cr') +
s(eof3, by = eof3.b, bs = 'cr') +
s(eof4, by = eof4.b, bs = 'cr'),
family=betar(link="logit"),
method = 'REML', data = dat)
lapply(list(mod2, mod3, mod4), glance) %>% do.call(rbind, .)
plot
lapply(list(mod2, mod3, mod4, mod5), glance) %>% do.call(rbind, .)
plot(mod5, pages = 1)
EvaluateSmooths = function(model, select=NULL, x=NULL, n=100) {
if (is.null(select)) {
select = 1:length(model$smooth)
}
do.call(rbind, lapply(select, function(i) {
smooth = model$smooth[[i]]
data = model$model
if (is.null(x)) {
min = min(data[smooth$term])
max = max(data[smooth$term])
x = seq(min, max, length=n)
}
if (smooth$by == "NA") {
by.level = "NA"
} else {
by.level = smooth$by.level
}
range = data.frame(x=x, by=by.level)
names(range) = c(smooth$term, smooth$by)
mat = PredictMat(smooth, range)
par = smooth$first.para:smooth$last.para
y = mat %*% model$coefficients[par]
se = sqrt(rowSums(
(mat %*% model$Vp[par, par, drop = FALSE]) * mat
))
return(data.frame(
label=smooth$label
, x.var=smooth$term
, x.val=x
, by.var=smooth$by
, by.val=by.level
, value = y
, se = se
))
}))
}
smooths = EvaluateSmooths(mod5)
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_grid(. ~ x.var)
library(ggplot2)
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_grid(. ~ x.var)
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_grid(. ~ x.var, scale = 'free_x')
mod6 <- gam(weight ~ s(lcp, bs = 'cr') +
s(water.stress, bs = 'cr') +
s(elev, bs = 'cr') +
s(eof3, bs = 'cr') +
s(eof4, bs = 'cr'),
family=betar(link="logit"),
method = 'REML', data = dat)
lapply(list(mod2, mod3, mod4, mod5, mod6), glance) %>% do.call(rbind, .)
smooths = EvaluateSmooths(mod6)
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_grid(. ~ x.var, scale = 'free_x') +
theme_minimal()
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_grid(. ~ x.var, scale = 'free_x') +
theme_bw()
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(. ~ x.var, scale = 'free_x') +
theme_bw()
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(. ~ x.var, scale = 'free_x', nrow = 2) +
theme_bw()
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(. ~ x.var, scales = 'free_x', nrow = 2) +
theme_bw()
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(~ x.var, scales = 'free_x', nrow = 2) +
theme_bw()
gam.names <- c(`lcp` = "Travel time (hours)",
`water.stress` = "Water stress (mm)",
`elev` = "Elevation (m)",
`eof3` = "EOF3",
`eof4` = "EOF4"
)
gam.names <- c(`lcp` = "Travel time (hours)",
`water.stress` = "Water stress (mm)",
`elev` = "Elevation (m)",
`eof3` = "EOF3",
`eof4` = "EOF4"
)
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(~ x.var, scales = 'free_x', nrow = 2), labeller = as_labeller(gam.names)+
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(~ x.var, scales = 'free_x', nrow = 2, labeller = as_labeller(gam.names)) +
labs(main = 'Predictors of tie strength', subtitle = 'Generalized additive model smooths and standard errors') +
theme_bw() +
theme(strip.background = element_blank())
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(~ x.var, scales = 'free_x', nrow = 2, labeller = as_labeller(gam.names)) +
labs(title = 'Predictors of tie strength', subtitle = 'Generalized additive model smooths and standard errors') +
theme_bw() +
theme(strip.background = element_blank())
ggsave('smooths.pdf')
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(~ x.var, scales = 'free_x', nrow = 2, labeller = as_labeller(gam.names)) +
labs(title = 'Predictors of tie strength', subtitle = 'Generalized additive model smooths and standard errors') +
theme_bw() +
theme(strip.background = element_blank())
ggsave('smooths.pdf', width = 6, height = 4.5)
ggplot(smooths, aes(x.val, value)) +
geom_line() +
geom_line(aes(y=value + 2*se), linetype="dashed") +
geom_line(aes(y=value - 2*se), linetype="dashed") +
facet_wrap(~ x.var, scales = 'free_x', nrow = 2, labeller = as_labeller(gam.names)) +
labs(title = 'Predictors of tie strength', subtitle = 'Generalized additive model smooths and standard errors', x = '', y = '') +
theme_bw() +
theme(strip.background = element_blank())
ggsave('smooths.pdf', width = 6, height = 4.5)
library(GGally)
library(ggmap)
library(maps)
library(maptools)
states <- map('state', regions = c('arizona', 'new mexico'), fill = T, plot = F)
IDs <- sapply(strsplit(states$names, ":"), function(x) x[1])
states.ply <- map2SpatialPolygons(states, IDs=IDs)
plotEOF <- function(x){
rasterVis::gplot(x) +
geom_raster(aes(fill = value), na.rm = T, show.legend = F) +
scale_fill_distiller(palette = 'RdBu', na.value = NA) +
geom_polygon(data = states, aes(x = long, y = lat, group = region), color = 'black', fill = NA) +
coord_quickmap() +
theme_minimal() +
labs(x = "Longitude", y = "Latitude")
}
eof1200 <- brick('Data/eof1200.nc')[[3]] %>%
mask(states.ply) %>%
plotEOF
eof1200
brick('Data/eof1200.nc')[[3]]
brick('Data/eof1200.nc')[[3]] %>%
mask(states.ply)
eof1200
brick('Data/eof1250.nc')[[3]] %>%
mask(states.ply)
ggnetworkmap(eof1200, ad1200, great.circles = T, size = .5, segment.alpha = I(.5))
eof1200
brick('Data/eof1200.nc')[[3]] %>%
mask(states.ply)
rasterVis::gplot(x) +
geom_raster(aes(fill = value), na.rm = T, show.legend = F) +
scale_fill_distiller(palette = 'RdBu', na.value = NA, limits = c(-.3,.3)) +
geom_polygon(data = states, aes(x = long, y = lat, group = region), color = 'black', fill = NA) +
coord_quickmap() +
theme_minimal() +
labs(x = "Longitude", y = "Latitude")
plotEOF <- function(x){
rasterVis::gplot(x) +
geom_raster(aes(fill = value), na.rm = T, show.legend = F) +
scale_fill_distiller(palette = 'RdBu', na.value = NA, limits = c(-.3,.3)) +
geom_polygon(data = states, aes(x = long, y = lat, group = region), color = 'black', fill = NA) +
coord_quickmap() +
theme_minimal() +
labs(x = "Longitude", y = "Latitude")
}
eof1200 <- brick('Data/eof1200.nc')[[3]] %>%
mask(states.ply) %>%
plotEOF
eof1200
brick('Data/eof1300.nc')[[3]] %>%
mask(states.ply)
brick('Data/eof1350.nc')[[3]] %>%
mask(states.ply)
swsn.pts <- read_csv('Data/attributes_orig.csv') %>%
select(easting = EASTING, northing = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame
ad1200 <- readSWSN('Data/AD1200sim.csv')
readSWSN <- function(net){
net.in <- read.csv(net, row.names = 1, check.names = F) %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F)
ord <- match(V(net.in)$name, swsn.attr$site)
V(net.in)$lon <- swsn.attr[ord, 6]
V(net.in)$lat <- swsn.attr[ord, 7]
V(net.in)$size <- swsn.attr[ord, 5]
V(net.in)$region <- swsn.attr[ord, 3] %>% as.character
return(net.in)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1250 <- readSWSN('Data/AD1250sim.csv')
ad1300 <- readSWSN('Data/AD1300sim.csv')
ad1350 <- readSWSN('Data/AD1350sim.csv')
ad1400 <- readSWSN('Data/AD1400sim.csv')
ad1200.t=delete.edges(ad1200, which(E(ad1200)$weight <=.5)) # here's my condition.
detach(igraph)
detach(network)
ad1200.t=igraph::delete.edges(ad1200, which(E(ad1200)$weight <=.5)) # here's my condition.
ad1200.t=igraph::delete.edges(ad1200, which(E(ad1200)$weight <=.5)) %>% igraph::delete.vertices(which(degree(.)<1))
e1 <- ggnetworkmap(eof1200, ad1200.t, great.circles = T, size = .5, segment.alpha = I(.5)) + geom_label(x = -106, y = 35, label = 'AD 1200')
e1 <- ggnetworkmap(eof1200, ad1200.t, great.circles = T, size = .5, segment.alpha = I(.5)) + geom_label(x = -106, y = 35, label = 'AD 1200')
e1
ad1200.t=igraph::delete.edges(ad1200, which(E(ad1200)$weight <=.75)) %>% igraph::delete.vertices(which(degree(.)<1))
ad1200.t=igraph::delete.edges(ad1200, which(E(ad1200)$weight <=.75))
ggnetworkmap(eof1200, ad1200.t, great.circles = T, size = .5, segment.alpha = I(.5)) + geom_label(x = -106, y = 35, label = 'AD 1200')
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd') +
scale_edge_alpha()+
coord_fixed()+
theme_void()
library(ggraph)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd') +
scale_edge_alpha()+
coord_fixed()+
theme_void()
net.in <- read.csv("Data/AD1200sim.csv", row.names = 1, check.names = F)
net.in[net.in < .9] <- 0
net.in <- net.in %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F)
V(net.in)$deg <- degree(net.in)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd') +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point() +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
V(net.in)$deg <-igraph::degree(net.in)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F) +
scale_edge_alpha()+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
logit<-function(x) log(x/(1-x))
E(net.in)$weight.l <- logit(E(net.in)$weight)
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight.l, alpha = weight.l)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
weight.l
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight.l, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = log(weight), alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_distiller(palette = 'YlOrRd', direction = F, guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
ggraph(net.in, 'circle') +
geom_edge_link(aes(color = weight, alpha = weight)) +
#geom_node_point(aes(size = deg)) +
scale_edge_color_viridis(guide = 'legend') +
scale_edge_alpha(guide = 'none')+
coord_fixed()+
theme_void()
knitr::opts_chunk$set(echo = TRUE)
library(remote)
install.packages("remote")
knitr::opts_chunk$set(echo = TRUE)
install_github('marchtaylor/sinkr')
library(devtools)
library(sinkr)
library(devtools)
install_github('marchtaylor/sinkr')
library(sinkr)
rm(e1)
rm(eof1200)
rm(elev)
rm(c(b,b3))
rm(b,b3)
rm(ad21200.t)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(raster)
library(gdistance)
library(rasterVis)
library(tidyverse)
library(rgdal)
swsn.attr <- read_csv('Data/attributes_orig.csv')
library(tidyverse)
library(rgdal)
swsn.attr <- read_csv('Data/attributes_orig.csv')
swsn.attr
swsn.attr %>%
select(EASTING, NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame
library(igraph)
swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cvind(swsn.attr, .)
swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
swsn <%>%
swsn.attr <- read_csv('Data/attributes_orig.csv')
swsn.attr <-  swsn.attr
swsn.attr <-  swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
swsn.attr
glimpse(swsn.attr)
ad1200 <- read_csv('Data/AD1200sim.csv')
ad1200
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
V(ad1200)
vertex_attr <- swsn.attr
vertex_attr
rm(vertex.attr)
rm(vertex_attr)
vertex_attr(ad1200) <- swsn.attr
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_edgelist
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_edgelist
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
readSWSN <- function(net){
# we use a hack here to set the vertex attributes. need to find if there's another way to easily add a whole dataframe of vertex attributes using something other than graph_from_data_frame's vertices arguement
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame# %>%
#graph_from
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
swsn.attr <- read_csv('Data/attributes_orig.csv') %>%
select(-1) # drop ID column
swsn.attr
swsn.attr <-  swsn.attr %>%
select(lon = EASTING, lat = NORTHING) %>%
SpatialPoints(proj4string=CRS("+proj=utm +zone=12 +datum=WGS84")) %>%
spTransform(CRS("+proj=longlat +datum=WGS84")) %>%
coordinates %>%
data.frame %>%
cbind(swsn.attr, .)
glimpse(swsn.attr)
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
readSWSN2 <- function(net){
net.in <- read.csv(net, row.names = 1, check.names = F) %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F)
ord <- match(V(net.in)$name, swsn.attr$SWSN_Site)
V(net.in)$lon <- swsn.attr[ord, 6]
V(net.in)$lat <- swsn.attr[ord, 7]
return(net.in)
}
ad1200.2 <- readSWSN2('Data/AD1200sim.csv')
ad1200.2
ad1200
ad1200.2
readSWSN <- function(net){
read.csv(net, row.names = 1, check.names = F)  %>%
as.matrix %>%
graph_from_adjacency_matrix(mode = 'undirected', weighted = T, diag = F) %>%
as_data_frame %>%
graph_from_data_frame(directed = F, vertices = swsn.attr)
}
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1200
ad1200.2
ad1200
ad1200 %>%
as_data_frame
ad1200.2
ad1200 <- readSWSN('Data/AD1200sim.csv')
ad1250 <- readSWSN('Data/AD1250sim.csv')
ad1300 <- readSWSN('Data/AD1300sim.csv')
ad1350 <- readSWSN('Data/AD1350sim.csv')
ad1400 <- readSWSN('Data/AD1400sim.csv')
install.packages("gdistance")
